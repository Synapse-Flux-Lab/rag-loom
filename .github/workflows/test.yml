name: Python Tests

on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]

jobs:
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.set-cache-key.outputs.cache-key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Generate cache key
      id: set-cache-key
      run: |
        # Create a unique cache key based on requirements files
        KEY="$RUNNER_OS-pip-$(sha256sum requirements*.txt tests/requirements-test.txt 2>/dev/null | sha256sum | cut -d' ' -f1)"
        echo "cache-key=$KEY" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ steps.set-cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements-frozen.txt" ]; then
          pip install -r requirements-frozen.txt
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        if [ -f "tests/requirements-test.txt" ]; then
          pip install -r tests/requirements-test.txt
        fi

  unit-tests:
    name: Unit Tests (3.12)
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Restore cached dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.install-dependencies.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies (from cache)
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements-frozen.txt" ]; then
          pip install -r requirements-frozen.txt
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        if [ -f "tests/requirements-test.txt" ]; then
          pip install -r tests/requirements-test.txt
        fi

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  integration-tests:
    name: Integration Tests (3.12)
    runs-on: ubuntu-latest
    needs: [install-dependencies, unit-tests]  # Run after deps installed and unit tests pass
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Restore cached dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.install-dependencies.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies (from cache)
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements-frozen.txt" ]; then
          pip install -r requirements-frozen.txt
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        if [ -f "tests/requirements-test.txt" ]; then
          pip install -r tests/requirements-test.txt
        fi

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v